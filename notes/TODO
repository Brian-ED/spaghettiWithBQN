Objectives:
    moving as much of the code to the BQN side as possible. 

BQN:
    finish the PyFunc so you can use python functions in bqn more easily.
    finish MsgExists in the comm namespace.
    
    maybe:
        make a BQN array type and change the dunder methods to be more inline with what bqn would do.


Python:
    ‚úîÔ∏èMake numpy arrays work better. bit vauge, but basically numpy has it's own types like int32 for stuff that needs handling.
    ‚úîÔ∏èAdd infinity and nan type support.
    test invalid inputs
    Add type safety and custom errors for them.
    Add more test cases.

Bugs:
    For unknown reasons, when running the bqn code using Code Runner vs-code extention, the Popen function in BQN.py breaks. running from terminal works.
    ‚Ä¢Show breaks a lot of things in the BQN function in BQN.py. I need to switch off of using std-out as output for python side to get as input.
    When passing through the bqn side, the array tends to get transposed, probably due to the IntoMediary function on the BQN side.
    
    this test case doesn't output a string back, instead giving a tuple.
    
    # Python side:
    comm.SendMsg("Hellooo")
    print(comm.GetMsg(1))

    # BQN side:
    ‚ü®CreateComm, IntoMediary‚ü©‚Üê‚Ä¢Import"fns.bqn"
    comm‚ÜêCreateComm"discBot"
    # comm.CleanMsgs@
    {ùïä: comm.SendMsg 1+comm.GetMsg 1}‚Ä¢_while_ 1 @